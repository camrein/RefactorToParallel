using RefactorToParallel.Analysis.ControlFlow;
using RefactorToParallel.Core.Util;

namespace RefactorToParallel.Analysis.DataFlow.Basic {
  /// <summary>
  /// The information generated by the reaching definitions analysis for each node.
  /// It represents a variable with the node that updates the value.
  /// </summary>
  public class ReachingDefinitionsTuple {
    private readonly int _hashCode;

    /// <summary>
    /// Gets the symbol of the variable.
    /// </summary>
    public string Variable { get; }

    /// <summary>
    /// Gets the updating node.
    /// </summary>
    public FlowNode Node { get; }

    /// <summary>
    /// Creates a new instance of the tuple.
    /// </summary>
    /// <param name="variable">The name of the variable.</param>
    /// <param name="node">The updating node.</param>
    public ReachingDefinitionsTuple(string variable, FlowNode node) {
      Variable = variable;
      Node = node;
      _hashCode = Hash.With(variable).And(node).Get();
    }

    public override bool Equals(object obj) {
      var other = obj as ReachingDefinitionsTuple;
      return other != null && Variable.Equals(other.Variable) && Node.Equals(other.Node);
    }

    public override int GetHashCode() {
      return _hashCode;
    }

    public override string ToString() {
      return $"({Variable}, {Node})";
    }
  }
}
